{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Version: 1.2 Overview This documentation provides an overview on how to use self-organizing map with relational perspective mapping (SOM-RPM) toolbox for MATLAB. SOM-RPM is an unsupervised machine learning algorithm designed to model and visualise both the topological and distance information in a data set. The SOM part of the algorithm is responsible for modelling topology, while RPM handles the modelling of distances. SOM-RPM was developed for hyperspectral data, specifically time-of-flight secondary ion mass spectrometry (ToF-SIMS) images and depth profiles. This toolbox is built around this use case, with specific functionality designed for interactive exploration of hyperspectral data. The remainder of these documentations explains how to best utilize the SOM-RPM toolbox to this end. Our primary aim is to make the SOM-RPM method more accessible to the broader scientific community. This documentation provides sufficient content for a non-expert in machine learning to be able to utilize SOM-RPM for exploratory analysis of their hyperspectral data. For more information about SOM-RPM, please refer to the original SOM-RPM paper , or to the paper associated with the release of this toolbox . Documentation Layout The panel on the left-hand side of the screen contains everything you'll need to get started with the SOM-RPM toolbox and to use as a reference while you work. This includes information on getting started/installation , the toolbox structure , general usage guidelines and a tutorial-style case study . You can follow along with the analysis in this case study using the embedded coded examples and the example data set included with the toolbox. If you use this toolbox or our data in your work, we ask that you please cite our toolbox. For information on how to do this, refer to the attribution and licence tabs.","title":"Home"},{"location":"index.html#overview","text":"This documentation provides an overview on how to use self-organizing map with relational perspective mapping (SOM-RPM) toolbox for MATLAB. SOM-RPM is an unsupervised machine learning algorithm designed to model and visualise both the topological and distance information in a data set. The SOM part of the algorithm is responsible for modelling topology, while RPM handles the modelling of distances. SOM-RPM was developed for hyperspectral data, specifically time-of-flight secondary ion mass spectrometry (ToF-SIMS) images and depth profiles. This toolbox is built around this use case, with specific functionality designed for interactive exploration of hyperspectral data. The remainder of these documentations explains how to best utilize the SOM-RPM toolbox to this end. Our primary aim is to make the SOM-RPM method more accessible to the broader scientific community. This documentation provides sufficient content for a non-expert in machine learning to be able to utilize SOM-RPM for exploratory analysis of their hyperspectral data. For more information about SOM-RPM, please refer to the original SOM-RPM paper , or to the paper associated with the release of this toolbox .","title":"Overview"},{"location":"index.html#documentation-layout","text":"The panel on the left-hand side of the screen contains everything you'll need to get started with the SOM-RPM toolbox and to use as a reference while you work. This includes information on getting started/installation , the toolbox structure , general usage guidelines and a tutorial-style case study . You can follow along with the analysis in this case study using the embedded coded examples and the example data set included with the toolbox. If you use this toolbox or our data in your work, we ask that you please cite our toolbox. For information on how to do this, refer to the attribution and licence tabs.","title":"Documentation Layout"},{"location":"attribution.html","text":"Attribution If you use our toolbox we ask that you please cite our paper [ADD CITATION] For the creation and publication of this toolbox we acknowledge that this work was supported by an Office of National Intelligence, National Intelligence and Security Discovery Research Grant (NI210100127) funded by the Australian Government. This work was performed in part at the Australian National Fabrication Facility (ANFF), a company established under the National Collaborative Research Infrastructure Strategy, through the La Trobe University Centre for Materials and Surface Science.","title":"Attribution"},{"location":"attribution.html#attribution","text":"If you use our toolbox we ask that you please cite our paper [ADD CITATION] For the creation and publication of this toolbox we acknowledge that this work was supported by an Office of National Intelligence, National Intelligence and Security Discovery Research Grant (NI210100127) funded by the Australian Government. This work was performed in part at the Australian National Fabrication Facility (ANFF), a company established under the National Collaborative Research Infrastructure Strategy, through the La Trobe University Centre for Materials and Surface Science.","title":"Attribution"},{"location":"background_theory.html","text":"Background Theory For a comprehensive description of the background theory underpinning SOM-RPM, please refer to the paper associated with the release of this toolbox . For a condensed version, please see below. The self-organizing map (SOM) creates a low-dimensional topology-preserving model of high-dimensional data, revealing the way in which data points are arranged in high-dimensional space. This toolbox is an implementation of the SOM combined with a secondary algorithm, called the relational perspective map (RPM), which together form self-organizing map with relational perspective mapping (SOM-RPM). SOM Given a data set comprising \\(p\\) features, the SOM learns the weights for a set of \\(N\\) neurons, \\(\\mathcal{N}=\\{n_1,n_2,\u2026,n_N\\}\\) (with the weights matrix given by \\(\\textbf{W}\u2208\\mathbb{R}^{N\u00d7p}\\) ), to model data topology. The result is a 2D grid of neurons whose topological relationships model the high-dimensional data topology, through a combination of the neuron positions in the grid and their weight vectors. Batch vs Online training The SOM can be fit using either batch of online training. Briefly, batch training updates neuron weights by considering all data points simultaneously, whereas online training involves passing each data point to the neurons sequentially. In general, batch training is much more efficient and, given that this toolbox is intended for hyperspectral data with many samples (pixels), this is the default and highly recommended training mode. In either case, neuron weights are updated based on a distance function, \\(d(n_r,n_{BMU})\\) , which determines the distance between each neuron, \\(n_r\\) , and the best matching unit (BMU), \\(n_{BMU}\\) , for a given data point. The BMU is the neuron whose weight vector is closest (typically based on Euclidean distance) to the data point vector. In our implementation, we use the Euclidean distance between neurons on the grid as a distance measure, with toroidal topology. The toroidal topology ensures that edge effects are mitigated during training. For more information about these fundamental aspects of the SOM, we strongly suggest referring to our paper and the broader SOM literature. Learning rate decay function When using online training mode, the toolbox allows specification of a learning rate decay (batch training mode does not use a learning rate). The two options for this decay provided are cosine (default) and linear decay. For the cosine decay, the learning rate at epoch t is given by EQ1 and linear decay it is given by EQ2 \\(\\eta(t) = \\frac{1}{2} \\cdot (\\eta_{max} - \\eta_{min}) \\cdot (1 + \\cos (\\frac{t}{t_{max}}\\pi))+ \\eta_{min}\\) EQ1 \\(\\eta(t) = (\\eta_{max} - \\eta_{min}) \\ast (1- \\frac{t}{t_{max}}) + \\eta_{min}\\) EQ2 where \\(\\eta_{max}\\) and \\(\\eta_{min}\\) are the maximum and minimum learning rates, respectively, and \\(t\\) and \\(t_{max}\\) are the current and maximum epochs, respectively. Neuron neighborhood function In order for the SOM to self-organize, it is necessary to use a neighborhood function in addition to the distance function described earlier. This function is responsible for determining how neurons close to the BMU are updated at each epoch. Two common functions are Gaussian and triangle, which are the two options currently provided in the toolbox. The Gaussian (EQ3) and the triangle (EQ4) neighborhood functions are given by \\(u(n_r,n_{BMU},t) = \\exp(-\\frac{d(n_r,n_{BMU})^2}{2\\sigma(t)^2})\\) EQ3 \\(u(n_r,n_{BMU},t) = \\mbox{max} (0,1 - \\frac{d(n_r,n_{BMU})}{\\sigma(t)})\\) EQ4 where \\(n_r\\) , \\(n_{BMU}\\) , \\(t\\) and and \\(d(n_r,n_{BMU})\\) are defined as before. The function \\(\\sigma(t)\\) is the neighborhood radius, which decays with respect to \\(t\\) (both cosine and linear decay are options in the toolbox, as for the learning rate). This decay is a key component of the SOM algorithm, resulting in increased focus on neurons closer to the BMU as training progresses. Intuitively, both neighborhood functions cause neurons that are close to the BMU to be adjusted more heavily than those that are further away on the SOM. This controls how the SOM self-organizes into a topological model of the data. SOM Evaluation Metrics The toolbox currently automatically calculates two commonly applied metrics to evaluate SOM fit quality: quantization error, \\(QE\\) , and topographic error, \\(TE\\) . The hyperparameters of the SOM can be adjusted to favour either \\(QE\\) or \\(TE\\) , by trading off fine-grained fitting (low \\(QE\\) ) with better topology preservation (low \\(TE\\) ). Quantisation Error \\(QE\\) measures how close each data point is to its BMU, with smaller values indicating a better fit. Mathematically, it is given by \\(QE = \\frac{1}{m} \\sum^m_{i=1} \\big\\| \\textbf{w}_{BMU} - \\textbf{x}_i \\big\\|\\) EQ5 where \\(\\textbf{w}_{BMU}\\) is the weight vector associated with the BMU for the i-th data point, \\(\\textbf{x}_i\\) . Note that the value of \\(QE\\) cannot be used as an absolute indicator of quality, as it depends on the data set. Topographic Error \\(TE\\) is a measure of the local topology preservation of the SOM. Mathematically, it is given by \\(TE = \\frac{1}{m} \\sum^m_{i=1} \\tau(\\textbf{x}_i)\\) EQ6 \\(\\tau (\\textbf{x}) = \\biggl\\{^{0 \\mbox{ if } n_{BMU} \\mbox{ and } n_{SBMU} \\mbox{ are neighbours on the SOM}}_{1 \\mbox{ else}}\\) EQ7 where \\(n_{BMU}\\) and \\(n_{SBMU}\\) are the best-matching and second best-matching units (neurons), respectively. Intuitively, \\(TE\\) applies an error if the two closest neurons to \\(\\textbf{x}_i\\) (based on Euclidean distance) are not neighbors, indicating a lack of local topology preservation. RPM The RPM algorithm is a non-linear dimensionality reduction (NLDR) algorithm designed to model high-dimensional distance information in a low-dimensional space. To do this, it takes as input a set of abstract data points \\(\\textbf{x}_i,i=1,2,\u2026n,\\) with a distance matrix \\(D^*\\) with corresponding distance elements \\(d_{ij}^*,i,j=1,2,\u2026,n\\) . These points are mapped by the RPM algorithm to a 2D map space \\(t_i,i=1,2,\u2026n,\\) with a new distance matrix \\(D\\) with elements \\(d_{i,j},i,j=1,2,\u2026,n\\) . RPM aims to preserve distance information by identifying a configuration such that \\(D\\) (in the 2D map space) is similar to \\(D^*\\) . The RPM algorithm models the data points as a multiparticle system on a continuous toroidal surface. Each pair of particles \\((i, j)\\) experiences a symmetric repulsive force, determined by both \\(d_{i,j}\\) and \\(d_{i,j}^*\\) . Specifically, the pairwise particle force is given by \\(f_{i,j} = \\frac{\\delta E_p}{\\delta d_{ij}} = -\\frac{d_{ij}^*}{d^{p+1}_{ij}}\\) EQ8 where \\(E_p\\) is the potential energy of the system and is defined by \\(E_p = \\Biggl\\{^{-\\sum_{i<j}d^*_{ij}\\ln(d^*_{ij}), \\mbox{ if }p=0}_{\\sum_{i<j}\\frac{d^*_{ij}}{pd^*_{ij}}, \\mbox{ else } }\\) EQ9 The rigidity, \\(\u03c1\\) , is set by the user and determines whether the mapping is biased toward local (larger values) or global (smaller values) distances. For our implementation of SOM-RPM for hyperspectral images, we apply the RPM algorithm to the neurons of a trained SOM. In this way, the topology of the neurons determines the starting coordinates of the low-dimensional RPM map, and their weight vectors are used for force calculations. Intuitively, the addition of RPM to the trained SOM incorporates distance information into the model to complement the topological information. Finally, a CIELAB color scheme is used to show the similarity between hyperspectral pixels (based on the SOM-RPM model) using color. The descriptions above are very brief and intended only to give an overview of the theory underpinning SOM-RPM. We again emphasize that users should read our original SOM-RPM paper , and the paper associated with the release of this toolbox .","title":"Background Theory"},{"location":"background_theory.html#background-theory","text":"For a comprehensive description of the background theory underpinning SOM-RPM, please refer to the paper associated with the release of this toolbox . For a condensed version, please see below. The self-organizing map (SOM) creates a low-dimensional topology-preserving model of high-dimensional data, revealing the way in which data points are arranged in high-dimensional space. This toolbox is an implementation of the SOM combined with a secondary algorithm, called the relational perspective map (RPM), which together form self-organizing map with relational perspective mapping (SOM-RPM).","title":"Background Theory"},{"location":"background_theory.html#som","text":"Given a data set comprising \\(p\\) features, the SOM learns the weights for a set of \\(N\\) neurons, \\(\\mathcal{N}=\\{n_1,n_2,\u2026,n_N\\}\\) (with the weights matrix given by \\(\\textbf{W}\u2208\\mathbb{R}^{N\u00d7p}\\) ), to model data topology. The result is a 2D grid of neurons whose topological relationships model the high-dimensional data topology, through a combination of the neuron positions in the grid and their weight vectors.","title":"SOM"},{"location":"background_theory.html#batch-vs-online-training","text":"The SOM can be fit using either batch of online training. Briefly, batch training updates neuron weights by considering all data points simultaneously, whereas online training involves passing each data point to the neurons sequentially. In general, batch training is much more efficient and, given that this toolbox is intended for hyperspectral data with many samples (pixels), this is the default and highly recommended training mode. In either case, neuron weights are updated based on a distance function, \\(d(n_r,n_{BMU})\\) , which determines the distance between each neuron, \\(n_r\\) , and the best matching unit (BMU), \\(n_{BMU}\\) , for a given data point. The BMU is the neuron whose weight vector is closest (typically based on Euclidean distance) to the data point vector. In our implementation, we use the Euclidean distance between neurons on the grid as a distance measure, with toroidal topology. The toroidal topology ensures that edge effects are mitigated during training. For more information about these fundamental aspects of the SOM, we strongly suggest referring to our paper and the broader SOM literature.","title":"Batch vs Online training"},{"location":"background_theory.html#learning-rate-decay-function","text":"When using online training mode, the toolbox allows specification of a learning rate decay (batch training mode does not use a learning rate). The two options for this decay provided are cosine (default) and linear decay. For the cosine decay, the learning rate at epoch t is given by EQ1 and linear decay it is given by EQ2 \\(\\eta(t) = \\frac{1}{2} \\cdot (\\eta_{max} - \\eta_{min}) \\cdot (1 + \\cos (\\frac{t}{t_{max}}\\pi))+ \\eta_{min}\\) EQ1 \\(\\eta(t) = (\\eta_{max} - \\eta_{min}) \\ast (1- \\frac{t}{t_{max}}) + \\eta_{min}\\) EQ2 where \\(\\eta_{max}\\) and \\(\\eta_{min}\\) are the maximum and minimum learning rates, respectively, and \\(t\\) and \\(t_{max}\\) are the current and maximum epochs, respectively.","title":"Learning rate decay function"},{"location":"background_theory.html#neuron-neighborhood-function","text":"In order for the SOM to self-organize, it is necessary to use a neighborhood function in addition to the distance function described earlier. This function is responsible for determining how neurons close to the BMU are updated at each epoch. Two common functions are Gaussian and triangle, which are the two options currently provided in the toolbox. The Gaussian (EQ3) and the triangle (EQ4) neighborhood functions are given by \\(u(n_r,n_{BMU},t) = \\exp(-\\frac{d(n_r,n_{BMU})^2}{2\\sigma(t)^2})\\) EQ3 \\(u(n_r,n_{BMU},t) = \\mbox{max} (0,1 - \\frac{d(n_r,n_{BMU})}{\\sigma(t)})\\) EQ4 where \\(n_r\\) , \\(n_{BMU}\\) , \\(t\\) and and \\(d(n_r,n_{BMU})\\) are defined as before. The function \\(\\sigma(t)\\) is the neighborhood radius, which decays with respect to \\(t\\) (both cosine and linear decay are options in the toolbox, as for the learning rate). This decay is a key component of the SOM algorithm, resulting in increased focus on neurons closer to the BMU as training progresses. Intuitively, both neighborhood functions cause neurons that are close to the BMU to be adjusted more heavily than those that are further away on the SOM. This controls how the SOM self-organizes into a topological model of the data.","title":"Neuron neighborhood function"},{"location":"background_theory.html#som-evaluation-metrics","text":"The toolbox currently automatically calculates two commonly applied metrics to evaluate SOM fit quality: quantization error, \\(QE\\) , and topographic error, \\(TE\\) . The hyperparameters of the SOM can be adjusted to favour either \\(QE\\) or \\(TE\\) , by trading off fine-grained fitting (low \\(QE\\) ) with better topology preservation (low \\(TE\\) ).","title":"SOM Evaluation Metrics"},{"location":"background_theory.html#quantisation-error","text":"\\(QE\\) measures how close each data point is to its BMU, with smaller values indicating a better fit. Mathematically, it is given by \\(QE = \\frac{1}{m} \\sum^m_{i=1} \\big\\| \\textbf{w}_{BMU} - \\textbf{x}_i \\big\\|\\) EQ5 where \\(\\textbf{w}_{BMU}\\) is the weight vector associated with the BMU for the i-th data point, \\(\\textbf{x}_i\\) . Note that the value of \\(QE\\) cannot be used as an absolute indicator of quality, as it depends on the data set.","title":"Quantisation Error"},{"location":"background_theory.html#topographic-error","text":"\\(TE\\) is a measure of the local topology preservation of the SOM. Mathematically, it is given by \\(TE = \\frac{1}{m} \\sum^m_{i=1} \\tau(\\textbf{x}_i)\\) EQ6 \\(\\tau (\\textbf{x}) = \\biggl\\{^{0 \\mbox{ if } n_{BMU} \\mbox{ and } n_{SBMU} \\mbox{ are neighbours on the SOM}}_{1 \\mbox{ else}}\\) EQ7 where \\(n_{BMU}\\) and \\(n_{SBMU}\\) are the best-matching and second best-matching units (neurons), respectively. Intuitively, \\(TE\\) applies an error if the two closest neurons to \\(\\textbf{x}_i\\) (based on Euclidean distance) are not neighbors, indicating a lack of local topology preservation.","title":"Topographic Error"},{"location":"background_theory.html#rpm","text":"The RPM algorithm is a non-linear dimensionality reduction (NLDR) algorithm designed to model high-dimensional distance information in a low-dimensional space. To do this, it takes as input a set of abstract data points \\(\\textbf{x}_i,i=1,2,\u2026n,\\) with a distance matrix \\(D^*\\) with corresponding distance elements \\(d_{ij}^*,i,j=1,2,\u2026,n\\) . These points are mapped by the RPM algorithm to a 2D map space \\(t_i,i=1,2,\u2026n,\\) with a new distance matrix \\(D\\) with elements \\(d_{i,j},i,j=1,2,\u2026,n\\) . RPM aims to preserve distance information by identifying a configuration such that \\(D\\) (in the 2D map space) is similar to \\(D^*\\) . The RPM algorithm models the data points as a multiparticle system on a continuous toroidal surface. Each pair of particles \\((i, j)\\) experiences a symmetric repulsive force, determined by both \\(d_{i,j}\\) and \\(d_{i,j}^*\\) . Specifically, the pairwise particle force is given by \\(f_{i,j} = \\frac{\\delta E_p}{\\delta d_{ij}} = -\\frac{d_{ij}^*}{d^{p+1}_{ij}}\\) EQ8 where \\(E_p\\) is the potential energy of the system and is defined by \\(E_p = \\Biggl\\{^{-\\sum_{i<j}d^*_{ij}\\ln(d^*_{ij}), \\mbox{ if }p=0}_{\\sum_{i<j}\\frac{d^*_{ij}}{pd^*_{ij}}, \\mbox{ else } }\\) EQ9 The rigidity, \\(\u03c1\\) , is set by the user and determines whether the mapping is biased toward local (larger values) or global (smaller values) distances. For our implementation of SOM-RPM for hyperspectral images, we apply the RPM algorithm to the neurons of a trained SOM. In this way, the topology of the neurons determines the starting coordinates of the low-dimensional RPM map, and their weight vectors are used for force calculations. Intuitively, the addition of RPM to the trained SOM incorporates distance information into the model to complement the topological information. Finally, a CIELAB color scheme is used to show the similarity between hyperspectral pixels (based on the SOM-RPM model) using color. The descriptions above are very brief and intended only to give an overview of the theory underpinning SOM-RPM. We again emphasize that users should read our original SOM-RPM paper , and the paper associated with the release of this toolbox .","title":"RPM"},{"location":"case_study.html","text":"Case Study This section contains a tutorial-style presentation of a case study, which provides a useful demonstration of typical usage of the toolbox. We have included ToF-SIMS imaging data to get you started using this toolbox. We have provided a ToF-SIMS data set to get you started here , with information about how the data was collected at the bottom of this page. Note that this data set is relatively large. If you would like to reduce its size, you can use the following command in MATLAB: X = imresize(X, scale, \u2018method\u2019, \u2018box\u2019); Where scale must be between 0-1 to reduce the data set size. Other interpolation methods are also possible \u2013 see here for more details. Creating a model Data are required to be in the MATLAB workspace as a 3D (or 4D, if three spatial dimensions) hyperspectral array. Our data variable is called X . The first step in using the SOM-RPM toolbox is to instantiate the SOM-RPM model: mdl = SOMRPMModel; This uses the SOMRPMModel class to create the mdl object. Then, we need to fit a SOM model by calling the corresponding class method: mdl = mdl.fit_toroidal_som(X, 6, 500); Note that the mdl object is returned, which is now modified and contains the fitted SOM model. In this case we have chosen to make a 6 x 6 neuron model with 500 epochs. This is quite a small model for our simple data set. We suggest running a range of model sizes and epochs before deciding the best model for your system. In general, there is no best size \u2013 this depends on the aims of the analysis and must be considered with reference to domain expertise. There are a number of additional settings that can be optionally added. For the full list, check the Toolbox Structure section. For usage suggestions check Usage guidelines . If, for example you want your model to have square neurons instead of the default hexagonal, then you can use the below: mdl = mdl.fit_toroidal_som(X, 6, 500, 'topol','square'); Or, if you want to change sigma_min from the default 0.05 to 0.1 then you can use the below. mdl = mdl.fit_toroidal_som(X, 6, 500, 'sigma_min', 0.1); The fit_toroidal_som function will output the alterd mdl object and a figure indicating the convergence of the quantisation and topographical error for your chosen model size and number of epochs. Applying rpm algorithm The second step in using the SOM-RPM toolbox is applying the RPM algorithm. This function has no required inputs, and be achieved using the following; mdl = mdl.fit_rpm; Optional inputs can be added as above, for the full list, check the Toolbox Structure section. The rigidity is the parameter you will want to investigate most often, to change it from its default 0 to -0.5, see below. mdl = mdl.fit_rpm('rigidity',-0.5); fit_rpm outputs several figures. The first figures are the Flat RPM (if set to true) and the toroidal RPM energy plots. Check the Usage guidelines for tips on when and how to optimise these values. The other figures are the similarity map, the SOM and the histogram SOM (indicating how many pixels are within each neuron), should you wish to access them at any other time, you can use the below commands, respectively; mdl.show_color_som; mdl.show_histogram_som; mdl.show_similarity_map; Selecting regions of interest (ROIs) The next step in using the SOM-RPM algorithm is to investigate the data using the region selection function. This can also be used to remove background pixels from the data set. The only required input is the name of the region to be selected. Note: If you make multiple selections using the same name, each selection will override the previous one by default. So, take care when naming your regions as it can become confusing very quickly. mdl = mdl.select_similarity_map_roi('roi_1'); This command will return the similarity map, and allow you to draw the regions you wish to select. If in default polygon mode, double clicking will close the shape. When the last region is drawn (1 by default), a new similarity map indicating only the selected pixels, the SOM with only the selected pixels present and the histogram SOM of the same area, will appear. Setting the number of ROIs to draw to zero (using n_roi ) allows you to use previously drawn regions with the same name, while changing other settings such as top_p or distance_threshold. This allows for a quick exploration of other settings without having to manually re-draw each time. mdl = mdl.select_similarity_map_roi('roi_1','n_roi', 0,'top_p', 0.98, 'dist_threshold', 0.15); The show_similarity_map , show_color_som and show_histogram_som methods can also be used with optional inputs to view ROI selections using roi_name. mdl.show_similarity_map('roi_name','roi_1'); Retrieving ROI data Using the get_roi_info , get_roi_pixel_data methods gives users the option to easily export information associated with the ROI selection. The get_roi_info method creates a structure in the workspace that holds all the meta information on the selection, such as which settings were used and the mask area for the ROI. While, get_roi_pixel_data exports an unfolded array with dimensions (number of X pixels x number of Y pixels) x number of spectral positions/intensities and plots the average weights for a given ROI against the feature labels. These functions can be accessed using the following; roi_1_info = mdl.get_roi_info('roi_1'); roi_1_data = mdl.get_roi_pixel_data('roi_1'); Note: the generated plot uses a generic x-axis ranging to one to the number of spectral features. To plot with feature labels, an optional argument 'feature_labels' can be added which must be a numeric vector of same length as the number of columns in X . In our example the array is called pk_lbls, representing the ToF-SIMS peak labels. roi_1_data = mdl.get_roi_pixel_data('roi_1', 'feature_labels', pk_lbls); For exporting roi data, the following comman can be used; [pixel_weights, pixel_spectra] = mdl.get_roi_pixel_data('roi_1', 'X', X, 'feature_labels', feature_labels); The rigidity can also be added as an optinal setting. This produces plots of the pixel speactra and weights and returns a matrix of size [no. of pixels within ROI, no. spectral features] Removing the substrate and running a new SOM on the reduced data set Assuming the roi_1 is the selected substrate, the mask input can be used to subtract the selected pixels from the data set. First, make a new SOMRPMModel , in this case we will create mdl_masked, then use the fit_torodial_som function as before, with the mask input set to the pixel index of roi_1_info. mdl_masked = SOMRPMModel; mdl_masked = mdl_masked.fit_torodial_som(X, 6, 500, 'mask', roi_1_info.pixel_ind); To invert the selection, you will need to redo the roi selecion using the same settings, with the addition of invert_selection , then repeat process. mdl = mdl.select_similarity_map_roi('roi_1','n_roi', 0,'top_p', 0.98, 'dist_threshold', 0.15, 'invert_selection', true); roi_1_info = mdl.get_roi_info('roi_1'); mdl_masked = SOMRPMModel; mdl_masked = mdl_masked.fit_toroidal_som(X, 6, 500, 'mask', roi_1_info.pixel_ind); Save the workspace using the following save('Data_name','-v7.3'); About included data set We have provided a ToF-SIMS hyperspectral data cube X . Its dimensions are 960x800x963, which represent the height, width and spectral dimension, respectively. ToF-SIMS data is acquired by measuring secondary ions emitted from the sample surface, based on their mass to charge ratio (m/z) inferred by their time-of-flight. The spectral dimension of X is therefore intensity value, reflecting the area under a mass peak (i.e. total number of ions collected) at a given m/z value. The m/z values are given in a vector called pk_lbls (short for peak labels). To prepare the sample, an Inkjet printer (Hp Officejet Pro 8100) was used to print a file from PowerPoint, using the with the media set to \u2018thick plain paper\u2019 and the quality set to \u2018best\u2019. Pure black, yellow, cyan and magenta ink were printed as well as a mixed purple region at 100%, 50% and 10% opacity on 200g/m2 Colour Copy paper. The paper sample was then analysed using an IONTOF V ToF-SIMS instrument. Using a Bi3+ 30keV primary ion, in negative ion mode, the stage was rastered in random mode, over a 2000 x 2400 mm area collecting 800 x 950 pixels, with a total dose density of 1.20e+11 (1/cm2). This was collected at 20 frames per patch, with 1 shot per frame over 1 scan. Argon gas flooding was set to 1x10-6 mbar and the flood gun was used to for charge compensation. Ion peaks were automatically selected with minimum threshold of 100 counts, resulting in 963 peaks, that we then exported to MATLAB using the BiF6 file format, for analysis with the SOM-RPM toolbox.","title":"Case Study"},{"location":"case_study.html#case-study","text":"This section contains a tutorial-style presentation of a case study, which provides a useful demonstration of typical usage of the toolbox. We have included ToF-SIMS imaging data to get you started using this toolbox. We have provided a ToF-SIMS data set to get you started here , with information about how the data was collected at the bottom of this page. Note that this data set is relatively large. If you would like to reduce its size, you can use the following command in MATLAB: X = imresize(X, scale, \u2018method\u2019, \u2018box\u2019); Where scale must be between 0-1 to reduce the data set size. Other interpolation methods are also possible \u2013 see here for more details.","title":"Case Study"},{"location":"case_study.html#creating-a-model","text":"Data are required to be in the MATLAB workspace as a 3D (or 4D, if three spatial dimensions) hyperspectral array. Our data variable is called X . The first step in using the SOM-RPM toolbox is to instantiate the SOM-RPM model: mdl = SOMRPMModel; This uses the SOMRPMModel class to create the mdl object. Then, we need to fit a SOM model by calling the corresponding class method: mdl = mdl.fit_toroidal_som(X, 6, 500); Note that the mdl object is returned, which is now modified and contains the fitted SOM model. In this case we have chosen to make a 6 x 6 neuron model with 500 epochs. This is quite a small model for our simple data set. We suggest running a range of model sizes and epochs before deciding the best model for your system. In general, there is no best size \u2013 this depends on the aims of the analysis and must be considered with reference to domain expertise. There are a number of additional settings that can be optionally added. For the full list, check the Toolbox Structure section. For usage suggestions check Usage guidelines . If, for example you want your model to have square neurons instead of the default hexagonal, then you can use the below: mdl = mdl.fit_toroidal_som(X, 6, 500, 'topol','square'); Or, if you want to change sigma_min from the default 0.05 to 0.1 then you can use the below. mdl = mdl.fit_toroidal_som(X, 6, 500, 'sigma_min', 0.1); The fit_toroidal_som function will output the alterd mdl object and a figure indicating the convergence of the quantisation and topographical error for your chosen model size and number of epochs.","title":"Creating a model"},{"location":"case_study.html#applying-rpm-algorithm","text":"The second step in using the SOM-RPM toolbox is applying the RPM algorithm. This function has no required inputs, and be achieved using the following; mdl = mdl.fit_rpm; Optional inputs can be added as above, for the full list, check the Toolbox Structure section. The rigidity is the parameter you will want to investigate most often, to change it from its default 0 to -0.5, see below. mdl = mdl.fit_rpm('rigidity',-0.5); fit_rpm outputs several figures. The first figures are the Flat RPM (if set to true) and the toroidal RPM energy plots. Check the Usage guidelines for tips on when and how to optimise these values. The other figures are the similarity map, the SOM and the histogram SOM (indicating how many pixels are within each neuron), should you wish to access them at any other time, you can use the below commands, respectively; mdl.show_color_som; mdl.show_histogram_som; mdl.show_similarity_map;","title":"Applying rpm algorithm"},{"location":"case_study.html#selecting-regions-of-interest-rois","text":"The next step in using the SOM-RPM algorithm is to investigate the data using the region selection function. This can also be used to remove background pixels from the data set. The only required input is the name of the region to be selected. Note: If you make multiple selections using the same name, each selection will override the previous one by default. So, take care when naming your regions as it can become confusing very quickly. mdl = mdl.select_similarity_map_roi('roi_1'); This command will return the similarity map, and allow you to draw the regions you wish to select. If in default polygon mode, double clicking will close the shape. When the last region is drawn (1 by default), a new similarity map indicating only the selected pixels, the SOM with only the selected pixels present and the histogram SOM of the same area, will appear. Setting the number of ROIs to draw to zero (using n_roi ) allows you to use previously drawn regions with the same name, while changing other settings such as top_p or distance_threshold. This allows for a quick exploration of other settings without having to manually re-draw each time. mdl = mdl.select_similarity_map_roi('roi_1','n_roi', 0,'top_p', 0.98, 'dist_threshold', 0.15); The show_similarity_map , show_color_som and show_histogram_som methods can also be used with optional inputs to view ROI selections using roi_name. mdl.show_similarity_map('roi_name','roi_1');","title":"Selecting regions of interest (ROIs)"},{"location":"case_study.html#retrieving-roi-data","text":"Using the get_roi_info , get_roi_pixel_data methods gives users the option to easily export information associated with the ROI selection. The get_roi_info method creates a structure in the workspace that holds all the meta information on the selection, such as which settings were used and the mask area for the ROI. While, get_roi_pixel_data exports an unfolded array with dimensions (number of X pixels x number of Y pixels) x number of spectral positions/intensities and plots the average weights for a given ROI against the feature labels. These functions can be accessed using the following; roi_1_info = mdl.get_roi_info('roi_1'); roi_1_data = mdl.get_roi_pixel_data('roi_1'); Note: the generated plot uses a generic x-axis ranging to one to the number of spectral features. To plot with feature labels, an optional argument 'feature_labels' can be added which must be a numeric vector of same length as the number of columns in X . In our example the array is called pk_lbls, representing the ToF-SIMS peak labels. roi_1_data = mdl.get_roi_pixel_data('roi_1', 'feature_labels', pk_lbls); For exporting roi data, the following comman can be used; [pixel_weights, pixel_spectra] = mdl.get_roi_pixel_data('roi_1', 'X', X, 'feature_labels', feature_labels); The rigidity can also be added as an optinal setting. This produces plots of the pixel speactra and weights and returns a matrix of size [no. of pixels within ROI, no. spectral features]","title":"Retrieving ROI data"},{"location":"case_study.html#removing-the-substrate-and-running-a-new-som-on-the-reduced-data-set","text":"Assuming the roi_1 is the selected substrate, the mask input can be used to subtract the selected pixels from the data set. First, make a new SOMRPMModel , in this case we will create mdl_masked, then use the fit_torodial_som function as before, with the mask input set to the pixel index of roi_1_info. mdl_masked = SOMRPMModel; mdl_masked = mdl_masked.fit_torodial_som(X, 6, 500, 'mask', roi_1_info.pixel_ind); To invert the selection, you will need to redo the roi selecion using the same settings, with the addition of invert_selection , then repeat process. mdl = mdl.select_similarity_map_roi('roi_1','n_roi', 0,'top_p', 0.98, 'dist_threshold', 0.15, 'invert_selection', true); roi_1_info = mdl.get_roi_info('roi_1'); mdl_masked = SOMRPMModel; mdl_masked = mdl_masked.fit_toroidal_som(X, 6, 500, 'mask', roi_1_info.pixel_ind); Save the workspace using the following save('Data_name','-v7.3');","title":"Removing the substrate and running a new SOM on the reduced data set"},{"location":"case_study.html#about-included-data-set","text":"We have provided a ToF-SIMS hyperspectral data cube X . Its dimensions are 960x800x963, which represent the height, width and spectral dimension, respectively. ToF-SIMS data is acquired by measuring secondary ions emitted from the sample surface, based on their mass to charge ratio (m/z) inferred by their time-of-flight. The spectral dimension of X is therefore intensity value, reflecting the area under a mass peak (i.e. total number of ions collected) at a given m/z value. The m/z values are given in a vector called pk_lbls (short for peak labels). To prepare the sample, an Inkjet printer (Hp Officejet Pro 8100) was used to print a file from PowerPoint, using the with the media set to \u2018thick plain paper\u2019 and the quality set to \u2018best\u2019. Pure black, yellow, cyan and magenta ink were printed as well as a mixed purple region at 100%, 50% and 10% opacity on 200g/m2 Colour Copy paper. The paper sample was then analysed using an IONTOF V ToF-SIMS instrument. Using a Bi3+ 30keV primary ion, in negative ion mode, the stage was rastered in random mode, over a 2000 x 2400 mm area collecting 800 x 950 pixels, with a total dose density of 1.20e+11 (1/cm2). This was collected at 20 frames per patch, with 1 shot per frame over 1 scan. Argon gas flooding was set to 1x10-6 mbar and the flood gun was used to for charge compensation. Ion peaks were automatically selected with minimum threshold of 100 counts, resulting in 963 peaks, that we then exported to MATLAB using the BiF6 file format, for analysis with the SOM-RPM toolbox.","title":"About included data set"},{"location":"changelog.html","text":"Changelog v1.2: Fixed a bug causing multiple ROIs to not work as expected for 4D depth profile data. v1.1: Release version.","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#v12","text":"Fixed a bug causing multiple ROIs to not work as expected for 4D depth profile data.","title":"v1.2:"},{"location":"changelog.html#v11","text":"Release version.","title":"v1.1:"},{"location":"contact.html","text":"Contact For questions or enquiries please contact Paul Pigram cmss@latrobe.edu.au","title":"Contact"},{"location":"contact.html#contact","text":"For questions or enquiries please contact Paul Pigram cmss@latrobe.edu.au","title":"Contact"},{"location":"faqs.html","text":"FAQs To submit a qustion please contact us here","title":"FAQs"},{"location":"faqs.html#faqs","text":"To submit a qustion please contact us here","title":"FAQs"},{"location":"getting_started.html","text":"Installing and using First, download the SOM-RPM Toolbox.mltx file from GitHub. Then, drag the file into the Command Window inside MATLAB (R2019b+). The toolbox will then be installed and ready to use! MATLAB version compatibility This toolbox is compatible with MATLAB R2019b or later versions.","title":"Installing and using"},{"location":"getting_started.html#installing-and-using","text":"First, download the SOM-RPM Toolbox.mltx file from GitHub. Then, drag the file into the Command Window inside MATLAB (R2019b+). The toolbox will then be installed and ready to use!","title":"Installing and using"},{"location":"getting_started.html#matlab-version-compatibility","text":"This toolbox is compatible with MATLAB R2019b or later versions.","title":"MATLAB version compatibility"},{"location":"glossary.html","text":"Glossary of terms Domain expertise : Specialised knowledge and/or skills in a particular field. Epoch : One pass of the training data through the algorithm, i.e. one iteration of learning. Learning rate : How quickly the model learns the data. Object-oriented : A programming methodology in which the system comprises one or more modular objects that are manipulated to perform a task. Quantization error : A SOM performance metric that measures how close each data point is to its closest neuron in the SOM. Similarity map : A color map representing the similarity between pixels in a hyperpsectral image using color. Topographic error : A SOM performance metric that measures how well the topology of the SOM matches the topology of the data.","title":"Glossary of terms"},{"location":"glossary.html#glossary-of-terms","text":"Domain expertise : Specialised knowledge and/or skills in a particular field. Epoch : One pass of the training data through the algorithm, i.e. one iteration of learning. Learning rate : How quickly the model learns the data. Object-oriented : A programming methodology in which the system comprises one or more modular objects that are manipulated to perform a task. Quantization error : A SOM performance metric that measures how close each data point is to its closest neuron in the SOM. Similarity map : A color map representing the similarity between pixels in a hyperpsectral image using color. Topographic error : A SOM performance metric that measures how well the topology of the SOM matches the topology of the data.","title":"Glossary of terms"},{"location":"licence.html","text":"Licence Attribution-NonCommercial-NoDerivatives 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. g. Licensor means the individual(s) or entity(ies) granting rights under this Public License. h. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material, You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"Licence"},{"location":"licence.html#licence","text":"Attribution-NonCommercial-NoDerivatives 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. g. Licensor means the individual(s) or entity(ies) granting rights under this Public License. h. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material, You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"Licence"},{"location":"toolbox_structure.html","text":"Toolbox Structure The SOM-RPM toolbox is built around a central class , called SOMRPMModel , which enables interactive analyses and data exploration using SOM-RPM. With this object-oriented design, almost of all of the functionality comes from direct interaction with instances of this class , which are called objects . For example, we can instantiate an object called mdl from the SOMRPMModel class like this: mdl = SOMRPMModel; The SOMRPMModel class has properties and methods . The properties store all of the data associated with the model (e.g. the SOM model, RPM models, hyperparameters etc.), while the methods act on these properties in some way. For example, the fit_toroidal_som method fits a SOM to the inputted data, with outputs stored as a SOMModel property in the SOMRPMModel object. The fit_rpm method then uses the stored SOMModel to fit an RPM model, and so on. Briefly, the workflow consists of the following steps (explained in more detail in the case study ). Instantiate a SOM-RPM model object Fit a toroidal SOM model using the fit_toroidal_som method Fit an RPM model to the toroidal SOM using the fit_rpm method Interact with the models using the following methods: a. show_similarity_map b. show_color_som c. show_histogram_som d. select_similarity_map_roi e. get_roi_info f. get_roi_pixel_data SOMRPMModel Methods fit_toroidal_som This method fits a toroidal SOM to the data, assigning each pixel (or voxel) a neuron. Below is a table of inputs, possible values and default values. Inputs denoted with an * are optional. Inputs Description Possible values Default X Hyperspectral data cube 3D numeric array NA nsize Number of neurons on each side of SOM Integer scalar greater than zero NA epochs Number of training epochs Integer scalar greater than zero NA topol* Neuron topology \u2018square\u2019 or \u2018hexagonal\u2019 \u2018hexagonal\u2019 training* Training algorithm \u2018batch\u2019 or \u2018online\u2019 'batch' use_gpu* Indicates whether to use GPU for computations Boolean (logical) false lr_max* Maximum (starting) learning rate Real scalar greater than zero 0.5 lr_min* Minimum (ending) learning rate Real scalar greater than zero and less than or equal to lr_max 0.01 lr_decay_func* Learning rate decay function 'cosine' or 'linear' 'cosine' neighbor_func* Neuron neighborhood function 'gaussian' or 'triangle' 'gaussian' sigma_max* Maximum (starting) sigma for neighborhood function Real scalar greater than zero and less than or equal to one 0.2 sigma_min* Minimum (ending) sigma for neighborhood function Real scalar greater than zero and less than or equal to sigma_max 0.05 sigma_decay_func* Decay function for sigma 'cosine' or 'linear' 'cosine' init* Weights initialisation method \u2018random\u2019 or \u2018pca\u2019 \u2018random\u2019 init_weights* Initial weights for the SOM neurons 3D numeric array of size [nsize, nsize, size(X, 3)] [] shuffle_data* Controls whether to shuffle data during training Boolean (logical) false plot_metrics* Plot quality metrics after fitting Boolean (logical) true mask* Mask for hyperspectral data cube pixels Boolean (logical) matrix of size [size(X, 1), size(X, 2)] OR a Boolean (logical) vector of length size(X, 1)*size(X, 2) false(0) verbose* Verbosity of print statement updates Integer scalar either 0 (no updates), 1 (update every 10 epochs) or 2 (update every epoch) 2 The only output is the completed model mdl. The quantisation and topographic error are printed in the command window. Plots showing these metrics as a function of epochs are also created automatically. fit_rpm This method applies the RPM algorithm to the trained SOM Model, colouring the SOM. There are no required input arguments for fit_rpm, so the below table shows only the optional input arguments and the outputs. In this case, the input arguments control both the RPM fitting and the resulting visualizations. Inputs Description Possible values Default init_lr* Initial learning rate for 3D toroidal RPM Real scalar greater than zero 0.1 vanishing_rate* Vanishing rate for 3D toroidal RPM Real scalar greater than zero 0.9999 rigidity* Rigidity for RPM force calculations Real scalar in range [-1, \u221e] 0 metric* Distance metric for high-dimensional distances \u2018euclidean\u2019, \u2018mahalanobis\u2019, \u2018cityblock\u2019, \u2018cosine\u2019, \u2026 'euclidean' n_iter* Maximum number of iterations for 3D toroidal RPM Integer greater than or equal to zero 10000 n_rot* Number of rotations around 3D torus to try Integer greater than or equal to zero 20 patience* Stopping iteration patience for 3D toroidal RPM Integer greater than or equal to zero 50 flat_approx* Use a flat RPM initially to approximate the best solution Boolean (logical) true init_lr_flat* Initial learning rate for flat RPM Real scalar greater than or equal to zero 0.5 vanishing_rate_flat* Vanishing rate for flat RPM Real scalar greater than or equal to zero 0.9999 n_iter_flat* Maximum number of iterations for flat RPM Integer greater than or equal to zero 10000 patience_flat* Stopping iteration patience for flat RPM Integer greater than or equal to zero 10 This again outputs the completed model mdl as well as 3-4 figures depending on your settings. In this case, the outputted SOMRPMModel will contain the trained RPM model. Where a SOMRPMModel object can only contain a single SOM, it can contain infinitely many RPM models with different rigidities. select_similarity_map_roi This method is used to select regions of interest either for background removal or for investigation of hyperspectral data. Inputs Description Possible values Default roi_name Name of the region of interest (ROI) String NA rigidity* Rigidity used for RPM model Real scalar in range [-1, \u221e] 0 n_roi* Number of ROIs to draw Integer greater than or equal to zero 1 roi_type* Type of ROI, either similar or selection 'similar' or 'selection' 'similar' draw_shape* Shape of ROI to draw \u2018Polygon\u2019, \u2018Circle\u2019, \u2018Freehand\u2019, \u2018Rectangle\u2019, \u2026 'Polygon' top_p* Cumulative pixel fraction to select Real scalar in range [0, 1] 1 dist_threshold* Distance threshold when using similar roi_type Real scalar greater than or equal to zero 0 invert_selection* Flag to invert the drawn ROI mask Boolean (logical) false color_scheme* Color scheme to use for visualisation 'cielab' or 'rgb' 'cielab' cmap* Colormap to use for histogram SOM \u2018parula\u2019, \u2018turbo\u2019, \u2018hsv\u2019, \u2018hot\u2019, \u2018cool\u2019, \u2018spring\u2019, \u2026 or 2D numeric RGB array 'gray' (inverted)","title":"Toolbox Structure"},{"location":"toolbox_structure.html#toolbox-structure","text":"The SOM-RPM toolbox is built around a central class , called SOMRPMModel , which enables interactive analyses and data exploration using SOM-RPM. With this object-oriented design, almost of all of the functionality comes from direct interaction with instances of this class , which are called objects . For example, we can instantiate an object called mdl from the SOMRPMModel class like this: mdl = SOMRPMModel; The SOMRPMModel class has properties and methods . The properties store all of the data associated with the model (e.g. the SOM model, RPM models, hyperparameters etc.), while the methods act on these properties in some way. For example, the fit_toroidal_som method fits a SOM to the inputted data, with outputs stored as a SOMModel property in the SOMRPMModel object. The fit_rpm method then uses the stored SOMModel to fit an RPM model, and so on. Briefly, the workflow consists of the following steps (explained in more detail in the case study ). Instantiate a SOM-RPM model object Fit a toroidal SOM model using the fit_toroidal_som method Fit an RPM model to the toroidal SOM using the fit_rpm method Interact with the models using the following methods: a. show_similarity_map b. show_color_som c. show_histogram_som d. select_similarity_map_roi e. get_roi_info f. get_roi_pixel_data","title":"Toolbox Structure"},{"location":"toolbox_structure.html#somrpmmodel-methods","text":"","title":"SOMRPMModel Methods"},{"location":"toolbox_structure.html#fit_toroidal_som","text":"This method fits a toroidal SOM to the data, assigning each pixel (or voxel) a neuron. Below is a table of inputs, possible values and default values. Inputs denoted with an * are optional. Inputs Description Possible values Default X Hyperspectral data cube 3D numeric array NA nsize Number of neurons on each side of SOM Integer scalar greater than zero NA epochs Number of training epochs Integer scalar greater than zero NA topol* Neuron topology \u2018square\u2019 or \u2018hexagonal\u2019 \u2018hexagonal\u2019 training* Training algorithm \u2018batch\u2019 or \u2018online\u2019 'batch' use_gpu* Indicates whether to use GPU for computations Boolean (logical) false lr_max* Maximum (starting) learning rate Real scalar greater than zero 0.5 lr_min* Minimum (ending) learning rate Real scalar greater than zero and less than or equal to lr_max 0.01 lr_decay_func* Learning rate decay function 'cosine' or 'linear' 'cosine' neighbor_func* Neuron neighborhood function 'gaussian' or 'triangle' 'gaussian' sigma_max* Maximum (starting) sigma for neighborhood function Real scalar greater than zero and less than or equal to one 0.2 sigma_min* Minimum (ending) sigma for neighborhood function Real scalar greater than zero and less than or equal to sigma_max 0.05 sigma_decay_func* Decay function for sigma 'cosine' or 'linear' 'cosine' init* Weights initialisation method \u2018random\u2019 or \u2018pca\u2019 \u2018random\u2019 init_weights* Initial weights for the SOM neurons 3D numeric array of size [nsize, nsize, size(X, 3)] [] shuffle_data* Controls whether to shuffle data during training Boolean (logical) false plot_metrics* Plot quality metrics after fitting Boolean (logical) true mask* Mask for hyperspectral data cube pixels Boolean (logical) matrix of size [size(X, 1), size(X, 2)] OR a Boolean (logical) vector of length size(X, 1)*size(X, 2) false(0) verbose* Verbosity of print statement updates Integer scalar either 0 (no updates), 1 (update every 10 epochs) or 2 (update every epoch) 2 The only output is the completed model mdl. The quantisation and topographic error are printed in the command window. Plots showing these metrics as a function of epochs are also created automatically.","title":"fit_toroidal_som"},{"location":"toolbox_structure.html#fit_rpm","text":"This method applies the RPM algorithm to the trained SOM Model, colouring the SOM. There are no required input arguments for fit_rpm, so the below table shows only the optional input arguments and the outputs. In this case, the input arguments control both the RPM fitting and the resulting visualizations. Inputs Description Possible values Default init_lr* Initial learning rate for 3D toroidal RPM Real scalar greater than zero 0.1 vanishing_rate* Vanishing rate for 3D toroidal RPM Real scalar greater than zero 0.9999 rigidity* Rigidity for RPM force calculations Real scalar in range [-1, \u221e] 0 metric* Distance metric for high-dimensional distances \u2018euclidean\u2019, \u2018mahalanobis\u2019, \u2018cityblock\u2019, \u2018cosine\u2019, \u2026 'euclidean' n_iter* Maximum number of iterations for 3D toroidal RPM Integer greater than or equal to zero 10000 n_rot* Number of rotations around 3D torus to try Integer greater than or equal to zero 20 patience* Stopping iteration patience for 3D toroidal RPM Integer greater than or equal to zero 50 flat_approx* Use a flat RPM initially to approximate the best solution Boolean (logical) true init_lr_flat* Initial learning rate for flat RPM Real scalar greater than or equal to zero 0.5 vanishing_rate_flat* Vanishing rate for flat RPM Real scalar greater than or equal to zero 0.9999 n_iter_flat* Maximum number of iterations for flat RPM Integer greater than or equal to zero 10000 patience_flat* Stopping iteration patience for flat RPM Integer greater than or equal to zero 10 This again outputs the completed model mdl as well as 3-4 figures depending on your settings. In this case, the outputted SOMRPMModel will contain the trained RPM model. Where a SOMRPMModel object can only contain a single SOM, it can contain infinitely many RPM models with different rigidities.","title":"fit_rpm"},{"location":"toolbox_structure.html#select_similarity_map_roi","text":"This method is used to select regions of interest either for background removal or for investigation of hyperspectral data. Inputs Description Possible values Default roi_name Name of the region of interest (ROI) String NA rigidity* Rigidity used for RPM model Real scalar in range [-1, \u221e] 0 n_roi* Number of ROIs to draw Integer greater than or equal to zero 1 roi_type* Type of ROI, either similar or selection 'similar' or 'selection' 'similar' draw_shape* Shape of ROI to draw \u2018Polygon\u2019, \u2018Circle\u2019, \u2018Freehand\u2019, \u2018Rectangle\u2019, \u2026 'Polygon' top_p* Cumulative pixel fraction to select Real scalar in range [0, 1] 1 dist_threshold* Distance threshold when using similar roi_type Real scalar greater than or equal to zero 0 invert_selection* Flag to invert the drawn ROI mask Boolean (logical) false color_scheme* Color scheme to use for visualisation 'cielab' or 'rgb' 'cielab' cmap* Colormap to use for histogram SOM \u2018parula\u2019, \u2018turbo\u2019, \u2018hsv\u2019, \u2018hot\u2019, \u2018cool\u2019, \u2018spring\u2019, \u2026 or 2D numeric RGB array 'gray' (inverted)","title":"select_similarity_map_roi"},{"location":"usage_guidelines.html","text":"Usage Guidelines Helpful tips and shortcuts Use the Tab key to auto fill optional settings and functions in the command window. Always explore your data using multiple models to get a full appreciation for the complexity of your data sets. When selecting regions of interest, setting n_roi = 0 allows you to use previously drawn regions with the same name, while changing other settings such as top_p or distance_threshold . This allows for a quick exploration of other settings without having to manually re-draw each time. Using invert_selection will invert the selection. This is a useful tool for removing the background or if your data exists in two key regions. Data pre-processing and requirements To begin, the input data used to train the SOM-RPM model, \\(X\\) , must be hyperspectral with either two or three spatial dimensions, i.e. either a 3D or 4D array (either single or double precision). This toolbox does not perform any data preprocessing, so this must be considered separately. In general, there is no one-size-fits-all in this regard, and it must be performed in careful consideration of the data, preferably with domain expertise. SOM fitting guidelines What is the best SOM size and number of Epochs? We suggest running a range of model sizes (using the nsize input argument) and epochs to explore your data. In general, there is no best size \u2013 this depends on the aims of the analysis and must be considered with reference to domain expertise. Adjusting the SOM size can provide a a hierarchical view of similarity, where smaller maps show what is broadly similar and larger maps indicate more subtle changes. The outcome of the SOM is dependent on many factors such as data size and quality, noise levels, number of expected components etc. As a rule of thumb, for simple systems, models up to size 10 x 10 should be sufficient. For more complex systems, 20 x 20 is often large enough. Alternatively, consider multiplying the number of expected components/classes by 4 as a starting point. This allows ample room for the components to be separated on the SOM. A suitable number of epochs can be chosen by monitoring for convergence of the quantisation error metric, which should reduce (until plateau) with increasing epochs. Additionally, the topographic error is a measure of the topological preservation of the model, whereby lower values indicate better preservation. As a starting point we suggest testing a range of values between 1 and 2000. Most data sets we have tested converge within this range. For example, a typical range of epochs may look something like [10, 100, 200, 500, 1000, 2000]. Note that, because the SOM is designed to be trained for a set number of epochs, separate models will need to be fit from scratch using different epochs. This is different from many machine learning algorithms which can be stopped early upon convergence. Note also that the number of epochs is linearly proportional to computation time i.e. Epochs has time complexity of O ( n ), while SOM size input has time complexity of O ( n 2 ). Neuron topology The neuron topology alters the number of neighbours each neuron has. Our toolbox offers the option between square and hexagonal. We have generally found hexagonal to be preferable as it has 6 neighbours instead of 4, and therefore tesselates with even spacing across the SOM (although our recent SOM hyperparameters paper did not show any major differences between the two). Training algorithm The training algorithm can be set to either batch (default) or online. Batch mode is recommended as it considers the entirety of the data set simultaneously and is therefore much more computationally efficient, which is particularly important for large hyperspectral data sets. In contrast, online mode updates the neurons weights one sample at a time, and this is significantly slower. We have included this for completeness, but it is likely to be too slow to be practical for most hyperspectral data sets. For a detailed and mathematical explanation read here . Trade-off between quantization error and topographic error. The quantisation measures how close each data point is to its BMU while topographic error measures the local topology of the SOM. Mathematical descriptions are provided here . In general this becomes a trade-off, in terms of model selection. That is as hyperparameters are adjusted (in particular the sigma_min argument), the two errors will tend to move in opposite directions. Selecting an optimal model using these metrics alone is therefore impossible, and must be done based on domain expertise and the specific aims of the analysis. Random versus PCA initialisation PCA initialisation initialises the weights of the SOM neurons based on the eigenvectors of the two largest principal components of the data. This will output the same SOM and RPM result in repeated calculations (when batch training mode is used). As the random initialisation is random, it results in a unique SOM being generated with repeated calculations. We suggest exploring both options to identify which is best for your specific data set. Adjusting sigma_min One of the most influential optional arguments to consider when fitting a toroidal som is sigma_min . As the SOM fitting progresses, the neighborhood radius (used to update neuron weights) decreases. sigma_min specifies the minimum radius. As we demonstrate briefly in our paper , changing this hyperparameter controls the trade-off between quantization error and topographic error. Specifically, increasing sigma_min will create more topologically accurate SOMs by restricting the freedom of individual neurons to move more closely to individual data points. Conversely, decreasing sigma_min will reduce the quantization error and therefore better capture the fine-grained structure in the data. Again, the optimal value will depend on the data set and the aims of the analysis. RPM fitting guidelines Flat and toroidal energy plots These plots describe how the energy of the system converges during the RPM calculation, with the flat energy describing the initial flat approximation (if used) and the toroidal energy describing the 3D toroidal model. Both of these plots should converge smoothly. Using the flat approximation significantly reduces the computational time required for the RPM to run, with no significant drawbacks (that we have identified). Experimentaion is encouraged to see how each approach works with your data. How do I improve/reduce the energy? In general, energy should converge smoothly. Sharp jumps indicate initial learning rate is too high and/or learning decay is too low. Conversely, setting the learning rate too low and/or decay too high will cause underfitting and lead to convergence at a suboptimal energy. We therefore recommend experimenting with these hyperparameters to achieve a minimum energy with a smooth convergence. Once a minium is identified, a final model should be re-fit using the optimal number of iterations. Rigidity The rigidity hyperparameter changes the distance modelling to focus on either global (low values) or local (high values) distance information. While a SOMRPMModel can only contain a single SOM, it can contain infinitely many RPM models with different rigidities, whereby each RPM model with a unique rigidity is stored as a field within the RPMModels property. As a rule-of-thumb, rigidities between -0.5 and 2 tend to show a good variation in terms of global versus local information. We recommend exploring this range (and beyond) with each data set. Selecting regions of interest (ROIs) on the similarity map How to select areas The region select tool, by default, uses one drawn polygon to select pixels. This can be changed using the n_roi and draw_shape optional inputs. Adjusting n_roi will change the number of regions you must draw to select pixels, while draw_shape can be changed to draw circular, rectangular or freehand regions. When using polygon selection, click once to begin the pixel selection, add vertices with additional clicks, then double click to close the shape. When using other selection shapes, click and hold/drag to select the area. When n_roi is set to zero, this will prompt to search for previously created ROIs with the same name as inputted. This is useful when modifying optional arguments, i.e. so that you do not need to redraw the selection each time. Selection modes The selection mode, roi_type , is set to similar by default, this mode will select all the pixels within your drawn ROI as well as 'similar' pixels, where similar is defined as those pixels sharing a best matching unit (BMU) with those pixels within the selection. This allows for all pixels associated with selected BMUs to be collected within one region. The roi_type can be changed to selection mode, which will only include pixels in the drawn ROI region without regard for RPM colouring. The dist_threshold (default = 0) can be increased to select pixels with BMU's close to the BMUs of pixels within the selection, whereby close is given by Euclidian distance in the RPM model. This mode is best used when the n_roi is set to zero, allowing for small changes without re-drawing regions top_p Using top_p allows for the exclusion of low-abundance pixels. For example if there is one red pixel in an area of 100 blue pixels, the red BMUs and associated pixels will be included in the selection. Using top_p selects the most abundant neurons from the drawn region until the cumulative fraction of pixels in the region reaches top_p . We suggest setting top_p to 0.98, but again advise that this will depend on your specific data set and application.","title":"Usage Guidelines"},{"location":"usage_guidelines.html#usage-guidelines","text":"","title":"Usage Guidelines"},{"location":"usage_guidelines.html#helpful-tips-and-shortcuts","text":"Use the Tab key to auto fill optional settings and functions in the command window. Always explore your data using multiple models to get a full appreciation for the complexity of your data sets. When selecting regions of interest, setting n_roi = 0 allows you to use previously drawn regions with the same name, while changing other settings such as top_p or distance_threshold . This allows for a quick exploration of other settings without having to manually re-draw each time. Using invert_selection will invert the selection. This is a useful tool for removing the background or if your data exists in two key regions.","title":"Helpful tips and shortcuts"},{"location":"usage_guidelines.html#data-pre-processing-and-requirements","text":"To begin, the input data used to train the SOM-RPM model, \\(X\\) , must be hyperspectral with either two or three spatial dimensions, i.e. either a 3D or 4D array (either single or double precision). This toolbox does not perform any data preprocessing, so this must be considered separately. In general, there is no one-size-fits-all in this regard, and it must be performed in careful consideration of the data, preferably with domain expertise.","title":"Data pre-processing and requirements"},{"location":"usage_guidelines.html#som-fitting-guidelines","text":"","title":"SOM fitting guidelines"},{"location":"usage_guidelines.html#what-is-the-best-som-size-and-number-of-epochs","text":"We suggest running a range of model sizes (using the nsize input argument) and epochs to explore your data. In general, there is no best size \u2013 this depends on the aims of the analysis and must be considered with reference to domain expertise. Adjusting the SOM size can provide a a hierarchical view of similarity, where smaller maps show what is broadly similar and larger maps indicate more subtle changes. The outcome of the SOM is dependent on many factors such as data size and quality, noise levels, number of expected components etc. As a rule of thumb, for simple systems, models up to size 10 x 10 should be sufficient. For more complex systems, 20 x 20 is often large enough. Alternatively, consider multiplying the number of expected components/classes by 4 as a starting point. This allows ample room for the components to be separated on the SOM. A suitable number of epochs can be chosen by monitoring for convergence of the quantisation error metric, which should reduce (until plateau) with increasing epochs. Additionally, the topographic error is a measure of the topological preservation of the model, whereby lower values indicate better preservation. As a starting point we suggest testing a range of values between 1 and 2000. Most data sets we have tested converge within this range. For example, a typical range of epochs may look something like [10, 100, 200, 500, 1000, 2000]. Note that, because the SOM is designed to be trained for a set number of epochs, separate models will need to be fit from scratch using different epochs. This is different from many machine learning algorithms which can be stopped early upon convergence. Note also that the number of epochs is linearly proportional to computation time i.e. Epochs has time complexity of O ( n ), while SOM size input has time complexity of O ( n 2 ).","title":"What is the best SOM size and number of Epochs?"},{"location":"usage_guidelines.html#neuron-topology","text":"The neuron topology alters the number of neighbours each neuron has. Our toolbox offers the option between square and hexagonal. We have generally found hexagonal to be preferable as it has 6 neighbours instead of 4, and therefore tesselates with even spacing across the SOM (although our recent SOM hyperparameters paper did not show any major differences between the two).","title":"Neuron topology"},{"location":"usage_guidelines.html#training-algorithm","text":"The training algorithm can be set to either batch (default) or online. Batch mode is recommended as it considers the entirety of the data set simultaneously and is therefore much more computationally efficient, which is particularly important for large hyperspectral data sets. In contrast, online mode updates the neurons weights one sample at a time, and this is significantly slower. We have included this for completeness, but it is likely to be too slow to be practical for most hyperspectral data sets. For a detailed and mathematical explanation read here .","title":"Training algorithm"},{"location":"usage_guidelines.html#trade-off-between-quantization-error-and-topographic-error","text":"The quantisation measures how close each data point is to its BMU while topographic error measures the local topology of the SOM. Mathematical descriptions are provided here . In general this becomes a trade-off, in terms of model selection. That is as hyperparameters are adjusted (in particular the sigma_min argument), the two errors will tend to move in opposite directions. Selecting an optimal model using these metrics alone is therefore impossible, and must be done based on domain expertise and the specific aims of the analysis.","title":"Trade-off between quantization error and topographic error."},{"location":"usage_guidelines.html#random-versus-pca-initialisation","text":"PCA initialisation initialises the weights of the SOM neurons based on the eigenvectors of the two largest principal components of the data. This will output the same SOM and RPM result in repeated calculations (when batch training mode is used). As the random initialisation is random, it results in a unique SOM being generated with repeated calculations. We suggest exploring both options to identify which is best for your specific data set.","title":"Random versus PCA initialisation"},{"location":"usage_guidelines.html#adjusting-sigma_min","text":"One of the most influential optional arguments to consider when fitting a toroidal som is sigma_min . As the SOM fitting progresses, the neighborhood radius (used to update neuron weights) decreases. sigma_min specifies the minimum radius. As we demonstrate briefly in our paper , changing this hyperparameter controls the trade-off between quantization error and topographic error. Specifically, increasing sigma_min will create more topologically accurate SOMs by restricting the freedom of individual neurons to move more closely to individual data points. Conversely, decreasing sigma_min will reduce the quantization error and therefore better capture the fine-grained structure in the data. Again, the optimal value will depend on the data set and the aims of the analysis.","title":"Adjusting sigma_min"},{"location":"usage_guidelines.html#rpm-fitting-guidelines","text":"","title":"RPM fitting guidelines"},{"location":"usage_guidelines.html#flat-and-toroidal-energy-plots","text":"These plots describe how the energy of the system converges during the RPM calculation, with the flat energy describing the initial flat approximation (if used) and the toroidal energy describing the 3D toroidal model. Both of these plots should converge smoothly. Using the flat approximation significantly reduces the computational time required for the RPM to run, with no significant drawbacks (that we have identified). Experimentaion is encouraged to see how each approach works with your data.","title":"Flat and toroidal energy plots"},{"location":"usage_guidelines.html#how-do-i-improvereduce-the-energy","text":"In general, energy should converge smoothly. Sharp jumps indicate initial learning rate is too high and/or learning decay is too low. Conversely, setting the learning rate too low and/or decay too high will cause underfitting and lead to convergence at a suboptimal energy. We therefore recommend experimenting with these hyperparameters to achieve a minimum energy with a smooth convergence. Once a minium is identified, a final model should be re-fit using the optimal number of iterations.","title":"How do I improve/reduce the energy?"},{"location":"usage_guidelines.html#rigidity","text":"The rigidity hyperparameter changes the distance modelling to focus on either global (low values) or local (high values) distance information. While a SOMRPMModel can only contain a single SOM, it can contain infinitely many RPM models with different rigidities, whereby each RPM model with a unique rigidity is stored as a field within the RPMModels property. As a rule-of-thumb, rigidities between -0.5 and 2 tend to show a good variation in terms of global versus local information. We recommend exploring this range (and beyond) with each data set.","title":"Rigidity"},{"location":"usage_guidelines.html#selecting-regions-of-interest-rois-on-the-similarity-map","text":"","title":"Selecting regions of interest (ROIs) on the similarity map"},{"location":"usage_guidelines.html#how-to-select-areas","text":"The region select tool, by default, uses one drawn polygon to select pixels. This can be changed using the n_roi and draw_shape optional inputs. Adjusting n_roi will change the number of regions you must draw to select pixels, while draw_shape can be changed to draw circular, rectangular or freehand regions. When using polygon selection, click once to begin the pixel selection, add vertices with additional clicks, then double click to close the shape. When using other selection shapes, click and hold/drag to select the area. When n_roi is set to zero, this will prompt to search for previously created ROIs with the same name as inputted. This is useful when modifying optional arguments, i.e. so that you do not need to redraw the selection each time.","title":"How to select areas"},{"location":"usage_guidelines.html#selection-modes","text":"The selection mode, roi_type , is set to similar by default, this mode will select all the pixels within your drawn ROI as well as 'similar' pixels, where similar is defined as those pixels sharing a best matching unit (BMU) with those pixels within the selection. This allows for all pixels associated with selected BMUs to be collected within one region. The roi_type can be changed to selection mode, which will only include pixels in the drawn ROI region without regard for RPM colouring. The dist_threshold (default = 0) can be increased to select pixels with BMU's close to the BMUs of pixels within the selection, whereby close is given by Euclidian distance in the RPM model. This mode is best used when the n_roi is set to zero, allowing for small changes without re-drawing regions","title":"Selection modes"},{"location":"usage_guidelines.html#top_p","text":"Using top_p allows for the exclusion of low-abundance pixels. For example if there is one red pixel in an area of 100 blue pixels, the red BMUs and associated pixels will be included in the selection. Using top_p selects the most abundant neurons from the drawn region until the cumulative fraction of pixels in the region reaches top_p . We suggest setting top_p to 0.98, but again advise that this will depend on your specific data set and application.","title":"top_p"}]}